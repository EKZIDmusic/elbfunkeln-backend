generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================== BENUTZER & AUTHENTIFIZIERUNG ====================

enum UserRole {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING_VERIFICATION
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?
  role              UserRole    @default(CUSTOMER)
  status            UserStatus  @default(PENDING_VERIFICATION)
  emailVerified     Boolean     @default(false)
  emailVerifiedAt   DateTime?
  
  // OAuth
  googleId          String?     @unique
  facebookId        String?     @unique
  instagramId       String?     @unique
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  addresses         Address[]
  orders            Order[]
  cart              Cart?
  favorites         Favorite[]
  reviews           Review[]
  tickets           Ticket[]
  refreshTokens     RefreshToken[]
  
  @@index([email])
  @@index([role])
  @@map("users")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  type        String   @default("shipping") // shipping, billing
  firstName   String
  lastName    String
  company     String?
  street      String
  streetNumber String
  additional  String?
  zipCode     String
  city        String
  country     String   @default("DE")
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ordersShipping Order[] @relation("ShippingAddress")
  ordersBilling  Order[] @relation("BillingAddress")
  
  @@index([userId])
  @@map("addresses")
}

// ==================== PRODUKTE ====================

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model Product {
  id              String        @id @default(uuid())
  sku             String        @unique
  name            String
  slug            String        @unique
  description     String        @db.Text
  shortDescription String?      @db.Text
  price           Decimal       @db.Decimal(10, 2)
  comparePrice    Decimal?      @db.Decimal(10, 2)
  costPrice       Decimal?      @db.Decimal(10, 2)
  
  // Inventory
  stockQuantity   Int           @default(0)
  lowStockThreshold Int         @default(5)
  
  // Product Details
  material        String?
  weight          Int?          // in grams
  dimensions      String?       // LxWxH in cm
  
  // SEO
  metaTitle       String?
  metaDescription String?       @db.Text
  
  // Status
  status          ProductStatus @default(DRAFT)
  isFeatured      Boolean       @default(false)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publishedAt     DateTime?
  
  // Relations
  categoryId      String?
  category        Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images          ProductImage[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  favorites       Favorite[]
  reviews         Review[]
  
  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
  @@map("products")
}

model ProductImage {
  id          String   @id @default(uuid())
  productId   String
  url         String
  altText     String?
  sortOrder   Int      @default(0)
  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@map("product_images")
}

model Favorite {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("favorites")
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  rating      Int      // 1-5
  title       String?
  comment     String?  @db.Text
  isVerified  Boolean  @default(false)
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([productId])
  @@map("reviews")
}

// ==================== WARENKORB ====================

model Cart {
  id          String     @id @default(uuid())
  userId      String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
  
  @@map("carts")
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  productId   String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

// ==================== BESTELLUNGEN ====================

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  SEPA_DEBIT
  SOFORT
  KLARNA
  APPLE_PAY
  GOOGLE_PAY
  GIFT_CARD
}

model Order {
  id                  String        @id @default(uuid())
  orderNumber         String        @unique
  userId              String
  
  // Addresses
  shippingAddressId   String
  billingAddressId    String
  
  // Pricing
  subtotal            Decimal       @db.Decimal(10, 2)
  shippingCost        Decimal       @db.Decimal(10, 2)
  taxAmount           Decimal       @db.Decimal(10, 2)
  discountAmount      Decimal       @db.Decimal(10, 2) @default(0)
  total               Decimal       @db.Decimal(10, 2)
  
  // Status
  status              OrderStatus   @default(PENDING)
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       PaymentMethod
  
  // Payment
  stripePaymentIntentId String?
  stripeChargeId      String?
  
  // Shipping
  shippingMethod      String?
  trackingNumber      String?
  trackingUrl         String?
  
  // Discount
  discountCodeId      String?
  
  // Notes
  customerNote        String?       @db.Text
  internalNote        String?       @db.Text
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  paidAt              DateTime?
  shippedAt           DateTime?
  deliveredAt         DateTime?
  cancelledAt         DateTime?
  
  // Relations
  user                User          @relation(fields: [userId], references: [id])
  shippingAddress     Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress      Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items               OrderItem[]
  discountCode        DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)
  
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// ==================== GUTSCHEINE & RABATTE ====================

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model DiscountCode {
  id              String        @id @default(uuid())
  code            String        @unique
  description     String?       @db.Text
  type            DiscountType
  value           Decimal       @db.Decimal(10, 2)
  minOrderAmount  Decimal?      @db.Decimal(10, 2)
  maxUses         Int?
  usedCount       Int           @default(0)
  validFrom       DateTime
  validUntil      DateTime
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  orders          Order[]
  
  @@index([code])
  @@map("discount_codes")
}

model GiftCard {
  id              String    @id @default(uuid())
  code            String    @unique
  initialValue    Decimal   @db.Decimal(10, 2)
  currentValue    Decimal   @db.Decimal(10, 2)
  currency        String    @default("EUR")
  purchasedBy     String?
  recipientEmail  String?
  recipientName   String?
  message         String?   @db.Text
  isActive        Boolean   @default(true)
  expiresAt       DateTime?
  purchasedAt     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([code])
  @@map("gift_cards")
}

// ==================== TICKETS & SUPPORT ====================

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Ticket {
  id          String          @id @default(uuid())
  ticketNumber String         @unique
  userId      String
  subject     String
  status      TicketStatus    @default(OPEN)
  priority    TicketPriority  @default(MEDIUM)
  assignedTo  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  closedAt    DateTime?
  
  user        User            @relation(fields: [userId], references: [id])
  messages    TicketMessage[]
  
  @@index([userId])
  @@index([status])
  @@map("tickets")
}

model TicketMessage {
  id          String   @id @default(uuid())
  ticketId    String
  content     String   @db.Text
  isInternal  Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@index([ticketId])
  @@map("ticket_messages")
}

// ==================== NEWSLETTER ====================

enum SubscriptionStatus {
  SUBSCRIBED
  UNSUBSCRIBED
  PENDING
}

model NewsletterSubscriber {
  id          String              @id @default(uuid())
  email       String              @unique
  firstName   String?
  lastName    String?
  status      SubscriptionStatus  @default(PENDING)
  subscribedAt DateTime           @default(now())
  unsubscribedAt DateTime?
  
  @@index([email])
  @@index([status])
  @@map("newsletter_subscribers")
}

model NewsletterCampaign {
  id          String   @id @default(uuid())
  name        String
  subject     String
  content     String   @db.Text
  sentAt      DateTime?
  recipientCount Int   @default(0)
  openCount   Int      @default(0)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("newsletter_campaigns")
}

// ==================== ANALYTICS ====================

model AnalyticsEvent {
  id          String   @id @default(uuid())
  eventType   String
  eventData   String   @db.Text
  userId      String?
  sessionId   String?
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())
  
  @@index([eventType])
  @@index([createdAt])
  @@map("analytics_events")
}

// ==================== SYSTEM ====================

model SystemLog {
  id          String   @id @default(uuid())
  level       String   // info, warning, error
  message     String   @db.Text
  context     String?  @db.Text
  userId      String?
  createdAt   DateTime @default(now())
  
  @@index([level])
  @@index([createdAt])
  @@map("system_logs")
}