generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole  @default(CUSTOMER)
  emailVerified Boolean   @default(false)
  banned        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses     Address[]
  orders        Order[]
  cart          Cart?
  favorites     Favorite[]
  tickets       Ticket[]
  reviews       Review[]
  giftCards     GiftCard[]
  newsletter    NewsletterSubscription?

  @@index([email])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  firstName String
  lastName  String
  street    String
  zip       String
  city      String
  country   String   @default("DE")
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders  Order[] @relation("ShippingAddress")
  billingOrders   Order[] @relation("BillingAddress")

  @@index([userId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  description  String?  @db.Text
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  sku          String   @unique
  stock        Int      @default(0)
  categoryId   String
  featured     Boolean  @default(false)
  active       Boolean  @default(true)
  weight       Int?
  images       String   @db.Text
  metadata     String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category   Category     @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  favorites  Favorite[]
  reviews    Review[]

  @@index([slug])
  @@index([categoryId])
  @@index([featured])
  @@index([active])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id                String        @id @default(uuid())
  orderNumber       String        @unique
  userId            String
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  subtotal          Decimal       @db.Decimal(10, 2)
  shipping          Decimal       @db.Decimal(10, 2)
  tax               Decimal       @db.Decimal(10, 2)
  discount          Decimal       @db.Decimal(10, 2) @default(0)
  total             Decimal       @db.Decimal(10, 2)
  shippingAddressId String
  billingAddressId  String
  trackingNumber    String?
  shippingMethod    String?
  paymentIntentId   String?
  discountCode      String?
  notes             String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model GiftCard {
  id             String    @id @default(uuid())
  code           String    @unique
  amount         Decimal   @db.Decimal(10, 2)
  balance        Decimal   @db.Decimal(10, 2)
  purchaserId    String?
  recipientEmail String?
  recipientName  String?
  message        String?   @db.Text
  expiresAt      DateTime?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  purchaser User? @relation(fields: [purchaserId], references: [id])

  @@index([code])
  @@index([active])
}

model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  type        String
  value       Decimal   @db.Decimal(10, 2)
  minPurchase Decimal?  @db.Decimal(10, 2)
  maxDiscount Decimal?  @db.Decimal(10, 2)
  usageLimit  Int?
  usageCount  Int       @default(0)
  startsAt    DateTime?
  expiresAt   DateTime?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([code])
  @@index([active])
}

model Ticket {
  id         String         @id @default(uuid())
  userId     String
  subject    String
  status     TicketStatus   @default(OPEN)
  priority   TicketPriority @default(MEDIUM)
  assignedTo String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  closedAt   DateTime?

  user     User            @relation(fields: [userId], references: [id])
  messages TicketMessage[]

  @@index([userId])
  @@index([status])
  @@index([priority])
}

model TicketMessage {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String?
  isStaff   Boolean  @default(false)
  message   String   @db.Text
  createdAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model NewsletterSubscription {
  id             String    @id @default(uuid())
  userId         String?   @unique
  email          String    @unique
  firstName      String?
  lastName       String?
  active         Boolean   @default(true)
  preferences    String?   @db.Text
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  user User? @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([active])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  title     String?
  comment   String?  @db.Text
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([rating])
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  eventType String
  userId    String?
  sessionId String?
  data      String   @db.Text
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}